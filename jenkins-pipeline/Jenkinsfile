pipeline {
    agent any
    
    parameters {
        string(name: 'DOCKER_TAG', defaultValue: 'latest', description: 'Parameterized Docker Image Tag')
    }
    
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
    }

    stages {
        
        stage('Clear Workspace') {
            steps {
                cleanWs()      // Clear Workspace before running pipeline
            }
        }
        
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'git-cred', url: 'https://github.com/Godfrey22152/DevSecFlow-CI-CD-Pipeline.git'
            }
        }
        
        stage('Code Compile') {
            steps {
                sh "mvn compile"
            }
        }
        
        stage('Test') {
            steps {
                sh "mvn test"
            }
        }
        
        stage('Trivy FS scan') {
            steps {
                sh "trivy fs --format table -o fs_result.html ."
            }
        }
        
        stage('Sonarqube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=TrainBooking-App -Dsonar.projectKey=TrainBooking-App \
                       -Dsonar.java.binaries=target'''
                }
                
            }
        }
        
        stage('Build') {
            steps {
                sh "mvn package"
            }
        }
        
        stage('Publish Artifacts') {
            steps {
                withMaven(globalMavenSettingsConfig: 'maven-settings', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                    sh "mvn deploy"
                }
            }
        } 
        
        stage('Docker Build and Tag') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker build -t godfrey22152/trainbooking-app:${params.DOCKER_TAG} ."
                    }
                }
            }
        }
        
        stage('Docker Image scan by Trivy') {
            steps {
                sh "trivy image --format table -o image_scan_result.html godfrey22152/trainbooking-app:${params.DOCKER_TAG}"
            }
        }
        
        stage('Publish Docker Image to Dockerhub') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker push godfrey22152/trainbooking-app:${params.DOCKER_TAG}"
                    }
                }
            }
        }
        
         stage('Update Docker Tag in the Manifest file') {
            steps {
                script {
                    withCredentials([gitUsernamePassword(credentialsId: 'git-cred', gitToolName: 'Default')]) {
                        sh '''
                            # Git Clone Repository
                            git clone https://github.com/Godfrey22152/DevSecFlow-CI-CD-Pipeline.git
                            cd DevSecFlow-CI-CD-Pipeline
                            git checkout main
                            
                            # List files to confirm the presence of app-deployment.yaml file in the Manifest_Files folder.
                            ls -l Manifest_Files/app-deployment.yaml
                            
                            # Get the absolute path for the current directory
                            repo_dir=$(pwd)
                            
                            # Use the absolute path for sed
                            sed -i "s|image: godfrey22152/trainbooking-app:.*|image: godfrey22152/trainbooking-app:${DOCKER_TAG}|" "${repo_dir}/Manifest_Files/app-deployment.yaml"
                        '''
                        
                        // Confirm the change
                        sh '''
                            echo "Updated YAML Manifest file Contents:"
                            cat DevSecFlow-CI-CD-Pipeline/Manifest_Files/app-deployment.yaml
                        '''
                        
                        // Configure Git for committing changes and pushing
                        sh '''
                            cd DevSecFlow-CI-CD-Pipeline   #Ensure you are inside the cloned repo. 
                            git config user.email "godfreyifeanyi45@gmail.com"
                            git config user.name "Godfrey22152"
                        '''
                        
                        // Commit and push Updated YAML file back to the repository
                        sh '''
                            cd DevSecFlow-CI-CD-Pipeline 
                            ls
                            git add Manifest_Files/app-deployment.yaml
                            git commit -m "Updated image tag to ${DOCKER_TAG} by Jenkins"
                            git push origin main
                        '''
                    }
                }
            }
        } 
        
        stage('Deploy to K8s-Cluster') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'odo-eks-cluster', contextName: '', credentialsId: 'k8-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://6D580E352404AF56W09C5081SA7U140.gr7.eu-west-1.eks.amazonaws.com') {
                    sh "kubectl apply -f Manifest_Files/app-deployment.yaml"
                    sleep 30
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'odo-eks-cluster', contextName: '', credentialsId: 'k8-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://6D580E352404AF56W09C5081SA7U140.gr7.eu-west-1.eks.amazonaws.com') {
                    sh "kubectl get pods"
                    sh "kubectl get svc"
                }
            }
        }
    } 
    // Email Notification Code Block
    post {
    always {
        script {
            def jobName = env.JOB_NAME
            def buildNumber = env.BUILD_NUMBER
            def pipelineStatus = (currentBuild?.result != null) ? currentBuild.result : 'SUCCESS'
            def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'
            
            def body = """
                <html>
                <body>
                <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                <h2>${jobName} - Build ${buildNumber}</h2>
                <div style="background-color: ${bannerColor}; padding: 10px;">
                <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                </div>
                <p>Check the <a href="{BUILD_URL}">console output</a>.</p>
                </div>
                </body>
                </html>
            """
            
            emailext (
                subject: "Jenkins Build Notification: ${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                body: body,
                from: 'jenkins@example.com',
                to: 'godfreyifeanyi45@gmail.com',
                replyTo: 'jenkins@example.com',
                mimeType: 'text/html',
            )
        }
    }
    }
}
